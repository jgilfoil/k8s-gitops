---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: sonarr
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: sonarr
      version: 15.2.1
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  values:
    image:
      repository: ghcr.io/k8s-at-home/sonarr
      tag: v3.0.6.1342
    env:
      TZ: "America/New_York"
    ingress:
      main:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - host: "sonarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - "sonarr.${SECRET_DOMAIN}"
            secretName: "sonarr-tls"
    podSecurityContext:
      supplementalGroups:
        - 100
    metrics:
      enabled: false
    persistence:
      config:
        enabled: true
        existingClaim: sonarr-config-v1
      media:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS_ADDR}"
            path: /volume2/Media
        mountPath: /media
      reverse-symlink:
        enabled: true
        type: configMap
        name: sonarr-reverse-symlink
        defaultMode: 777
        items:
          - key: reverse-symlink.sh
            path: /config/scripts/reverse-symlink.sh
    resources:
      requests:
        memory: 250Mi
        cpu: 500m
      limits:
        memory: 1500Mi
    podAnnotations:
      # backup.velero.io/backup-volumes: config
      setGateway: "true"
    configmap:
      reverse-symlink:
        enabled: true
        data:
          reverse-symlink.sh: |
            #!/bin/bash

            PERMPATH="$sonarr_episodefile_path"
            LINKPATH="$sonarr_episodefile_sourcepath"

            if [[ -f "$LINKPATH" ]]; then
                sleep 1
            else
                exit 0
                # changed from Radarr as Sonarr fails on test unless exit normally
            fi

            ORIGFILESIZE=$(stat -c%s "$LINKPATH")
            PERMFILESIZE=$(stat -c%s "$PERMPATH")

            sleep 30

            while [[ $PERMFILESIZE != $ORIGFILESIZE ]]; do
                sleep 60
                PERMFILESIZE=$(stat -c%s "$PERMPATH")
            done

            if [[ $PERMFILESIZE == $ORIGFILESIZE ]]; then
                # Save current time stamps to prevent radarr from identifying our simlink as new, and double-processing it
                LINKDIR=$(dirname "$LINKPATH")
                FOLDER_DATE=$(date -r "$LINKDIR" +@%s.%N)
                FILE_DATE=$(date -r "$LINKPATH" +@%s.%N)
            
                rm "$LINKPATH"
                ln -s "$PERMPATH" "$LINKPATH"
            
                touch --no-create --no-dereference  --date "$FILE_DATE" "$LINKPATH"
                touch --no-create --no-dereference  --date "$FILE_DATE" "$PERMPATH"
                touch --no-create --no-dereference  --date "$FOLDER_DATE" "$LINKDIR"
            fi
