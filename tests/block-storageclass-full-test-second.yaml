
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kubia-2-sc-claim
  labels:
    app: kubia-2
spec:
  storageClassName: ceph-block
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kubia-2-sc-claim-custom
  labels:
    app: kubia-2
spec:
  storageClassName: ceph-block
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20M
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubia-2
  labels:
    app: kubia-2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubia-2
  template:
    metadata:
      name: kubia-2
      labels:
        app: kubia-2
      annotations:
        backup.velero.io/backup-volumes: custom
        # pre.hook.backup.velero.io/container: fsfreeze
        # pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/custom"]'
        # post.hook.backup.velero.io/container: fsfreeze
        # post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/custom"]'
    spec:
      containers:
      - image: luksa/fortune
        name: html-generator
        volumeMounts:
        - name: html
          mountPath: /var/htdocs
      - image: nginx:alpine
        name: web-server
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
          readOnly: true
        - name: custom
          mountPath: /custom
        ports:
        - containerPort: 80
          protocol: TCP
      volumes:
      - name: html
        persistentVolumeClaim:
          claimName: kubia-2-sc-claim
      - name: custom
        persistentVolumeClaim:
          claimName: kubia-2-sc-claim-custom
---
apiVersion: v1
kind: Service
metadata:
  name: kubia-2
  labels:
    app: kubia-2
spec:
  type: ClusterIP
  selector:
    app: kubia-2
  ports:
  - port: 8080
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kubia-2
  labels:
    app: kubia-2
  namespace: default
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
spec:
  ingressClassName: traefik
  rules:
    - host: "kubia-2.apostoli.pw"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kubia-2
                port:
                  number: 8080
  tls:
  - hosts:
    - "kubia-2.apostoli.pw"